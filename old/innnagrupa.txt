#Zadanie 1
# Nie, szereg rozdzielczy dla cechy jakosciowej buduje sie inaczej niz dla cechy
# ilosciowej ciaglej, poniewaz w przypadku cechy ilosciowej ciaglej okreslamy
# przedzialy z nieskonczenie wieloma wartosciami zmiennej. W przypadku cechy 
# jakosciowej istnieje tylko kilka mo�liwoych wartosci zmiennej. Dla cechy jakosciowej
# wartosci zmiennej powtarzaj sie, a dla ilosciowej ciaglej nie.




#Zadanie 2
dane <- c(43, 53, 39, 45, 51, 48, 32, 41, 34)
#2.1
shapiro.test(dane)$p.value
#0.8757152 > 0.05
#Tak, czas snu ma rozklad normalny, poniewaz p.value > 0.05 wiec nie ma podstaw do odrzucenia

#2.2
#estymatory 
mean(dane)
#42.88889 wartosc oczekiwana
var(dane)
#51.86111 
#install.packages('EnvStats')
library(EnvStats)
enorm(dane,method = "mvue", ci=TRUE, ci.type ="two-sided", conf.level = 0.9, ci.param ="mean")$interval$limits
#     LCL      UCL 
# 38.42506 47.35271 




#Zadanie 3
sport <- c(3776, 3908, 4623, 4028, 4052, 4686, 4184, 3494)
bez_sport <- c(3332, 3426, 4077, 3740, 3756, 3643)
#dwie pr�by, niezale�ne

shapiro.test(sport)
#p-value = 0.6752 > 0.05 brak podstaw do odrzucenia H0
shapiro.test(bez_sport)
#p-value = 0.7892 > 0.05 brak podstaw do odrzucenia H0
#mamy normalno��
#estymatory
var(sport)
#162892.1
var(bez_sport)
#70420.27

var(sport) > var(bez_sport)
var.test(sport,bez_sport, paired=FALSE, alternative="greater")
#p-value = 0.1865 > 0.05 brak podstaw do odrzucenia

mean(sport)
#4093.875
mean(bez_sport)
#3662.333

t.test(sport, bez_sport, var.equal = FALSE, alternative="greater")
#p-value = 0.0166 < 0.05 odrzucamy
#Uprawianie sportu zwi�ksza pojemnosc p�uc





#Zadanie 4
produkcja <- c(2.1, 6.3, 9.7, 4.8, 10.1, 6.1, 5.8, 9.7)
energia <- c(22.35, 57.19, 81.12, 46.32, 82.39, 53.70, 56.93, 84.27)

data_set <- data.frame(produkcja = produkcja, energia = energia)
head(data_set)
qqnorm(lm(produkcja ~ energia, data=data_set)$residuals)
qqline(lm(produkcja ~ energia, data=data_set)$residuals)
model <- lm(produkcja ~ energia, data =data_set)
model

coef(model)
#> coef(model)
#(Intercept)     energia 
#-1.1042005   0.1309881 
confint(model)
#                 2.5 %     97.5 %
# (Intercept) -2.0479586 -0.1604424
# energia      0.1161836  0.1457926

summary(model)

#temp_v <- data.frame(produkcja = seq(min(data_set$energia -14, max(data_set$energia + 13), length =100 )))

#pred <- stats::predict(model, temp_v, interval="prediction")
#pred
temp_v <- data.frame(produkcja = 6000, energia = energia)
#new_p <- data.frame(energia = energia)
stats::predict(model, temp_v, interval="prediction")

#fit       lwr       upr
#1 1.823383 0.7709848  2.875782
#2 6.387009 5.4979425  7.276075
#3 9.521554 8.5830056 10.460102
#4 4.963168 4.0508809  5.875455
#5 9.687909 8.7430878 10.632729
#6 5.929860 5.0364266  6.823294
#7 6.352952 5.4636629  7.242240
#8 9.934166 8.9794555 10.888877