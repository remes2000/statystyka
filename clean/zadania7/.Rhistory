load("../data/braking.RData")
head(braking)
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(speed ~ distance, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
stats::predict(model, future, interval = 'prediction')
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
model
braking
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
brakingB <- braking[-27, ]
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
brakingB <- braking[-27, ]
plot(braking, main = "Wykres rozrzutu", pch = 16)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
brakingB <- braking[-27, ]
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
brakingB <- braking[-27, ]
modelB <- lm(distance ~ speed, data = brakingB)
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
abline(modelB, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
load("../data/braking.RData")
# Wykres rozrzutu
plot(braking, main = "Wykres rozrzutu", pch = 16)
model <- lm(distance ~ speed, data = braking)
plot(braking, main = "Wykres rozrzutu", pch = 16)
abline(model, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
# Predykcje
stats::predict(model, future, interval = 'prediction')
# Bez odstającej wartości
brakingB <- braking[-27, ]
modelB <- lm(distance ~ speed, data = brakingB)
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
plot(brakingB, main = "Wykres rozrzutu", pch = 16)
abline(modelB, col = "red", lwd = 2)
future <- data.frame(speed = 30:50)
stats::predict(modelB, future, interval = 'prediction')
